///SPDX-License-Identifier: IMSE

pragma solidity ^0.8.0;

/// @title smartNFT: Harblock - ERC-721 Non-Fungible Token Standard based
interface smartNFT{
    /// @dev This emits when ownership of any NFT changes an user.
    ///  This event emits when the user of a token is transfered.
    ///  (`_addressUser` == 0) when a user is unassigned.
    event UserAssigned(uint256 indexed tokenID, address indexed _addressUser);
    
    /// @dev This emits when user of any NFT verify a device.
    ///  This event emits when the user a device finishing the assignment.
    event UserEngaged(uint256 indexed tokenID);
    
        /// @dev This emits when ownership  any NFT verify a device.
    ///  This event emits when the owner a device finishing the transference.
    event OwnerEngaged(uint256 indexed tokenID);

    /// @notice This function define how the Smart Device is binded whith a new token
    /// @dev Only the manufacturer of SD account can create a token and will be the first owner of token.
    ///  The inital state of the token is "waitingForOwner" until verification by the new Owner.
    /// @param _addressSD An address generated by the smart device, who only de smart device can generate this account. _addressOwner is the first owner of the Smart Device
    /// @return The tokenID of the token generated binded to Smart Device.
    function createToken(address _addressSD, address _addressOwner) external returns (uint256);

    /// @notice This function define the transference of use of a Smart Device
    /// @dev Only the owner of token account can transfer a token and the state of token need to "engagedWithOwner","waitingForUser" or "engagedWithUser".
    ///  The state of token must change to "waitingForUser" and change the parameter addressUser of token defined by _tokenID with _addressUser
    /// @param _tokenId the tokenID of Smart Device.
    /// @param _addressUser The address of the new user.
    function setUser(uint256 _tokenId, address _addressUser) external; 

/*    TODO:Explicar las nuevas funciones.
    /// @notice This function complete the transference of token to an owner
    /// @dev Only can be call if the state of token is "waitingForOwner" and only the owner can call this function,
    ///  This function update the state of token like "engagedWithOwner"
    ///  and send an event OwnerEngaged with tokenID of token verified.
    /// @param _tokenId the tokenID of Smart Device verified.
    function ownerEngage(uint256 _tokenId) external; 
    
    /// @notice This function complete the assignment of token to an user
    /// @dev Only can be call if the state of token is "waitingForUser" and only the user can call this function,
    ///  This function update the state of token like "engagedWithUser"
    ///  and send an event UserEngaged with tokenID of token verified.
    /// @param _tokenId the tokenID of Smart Device verified.
    function userEngage(uint256 _tokenId) external; 
*/
    function startOwnerEngage(uint256 _tokenId, uint256 _dataEngage, uint256 _hashK_O) external;
    function ownerEngage(uint256 _hashK_D) external; 
    function startUserEngage(uint256 _tokenId, uint256 _dataEngage, uint256 _hashK_U) external;
    function userEngage(uint256 _hashK_D) external; 
    function checkTimeout(uint256 _tokenId) external returns (bool);
    function setTimeout(uint256 _tokenId, uint256 _timeout) external; 
    function timestampUpdate() external; 
    /// @notice This function let obtain the tokenID from an address of Smart Device 
    /// @dev Everybody can call this function, can be execute any code on blockchain only read.
    /// @param _addressSD the addres to obtain it's token ID
    /// @return The tokenID of the token generated binded to _addressSD.
    function tokenFromBCA(address _addressSD) external view returns (uint256);
    
    /// @notice This function let know  who is the owner of token by the address of Smart Device
    /// @dev Everybody can call this function, can be execute any code on blockchain only read.
    /// @param _addressSD the addres to obtain it's owner.
    /// @return The owner of the token generated binded to _addressSD.
    function ownerOfFromBCA(address _addressSD) external view returns (address);
    
    /// @notice This function let know  who is the user of the token with its tokenID
    /// @dev Everybody can call this function, can be execute any code on blockchain only read.
    /// @param _tokenId of the token to obtain it's user.
    /// @return The user of the token with _tokenId.
    function userOf(uint256 _tokenId) external view returns (address);
    
    /// @notice This function let know  who is the user of token by the address of Smart Device
    /// @dev Everybody can call this function, can be execute any code on blockchain only read.
    /// @param _addressSD the addres to obtain it's user.
    /// @return The user of the token generated binded to _addressSD.
    function userOfFromBCA(address _addressSD) external view returns (address);
    
    /// @notice This function let know many tokens have an user.
    /// @dev Everybody can call this function, can be execute any code on blockchain only read.
    /// @param _addressUser the address to know the number of device can use.
    /// @return the number of device can use.
    function userBalanceOf(address _addressUser) external view returns (uint256);
    
    /// @notice This function let know many tokens of an owner have an user.
    /// @dev Everybody can call this function, can be execute any code on blockchain only read.
    /// @param _addressUser the address to know the number of device of an owner can use.
    /// @param _addressOwner the address the owner of this tokens.
    /// @return the number of device of an owner can use.
    function userBalanceOfAnOwner(address _addressUser, address _addressOwner) external view returns (uint256);
}
